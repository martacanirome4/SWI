#!/usr/bin/env node

// chat_login/bin/www

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('PrÃ¡cticaExamen:server');
var http = require('http');
const { Server } = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
const io = new Server(server);


// Attach session to socket.io connection
io.use((socket, next) => {
  // Get session data from the express app
  const req = socket.request;
  const res = req.res;  // Can be used to manage response
  if (req.session && req.session.user) {
    socket.username = req.session.user.username; // Attach username from session to socket
    return next();
  } else {
    return next(new Error('User not authenticated'));
  }
});

io.on('connection', (socket) => {
  console.log('A user connected.');

  socket.on('join', (username) => {
      if (!username) {
          console.log('Unauthenticated user attempted to join.');
          socket.disconnect();
          return;
      }

      socket.username = username;
      console.log(`${username} has joined the chat.`);
      io.emit('user_connected', `${username} has joined the chat`);
  });

  // Listen for chat messages
  socket.on('chat', (data) => {
      const { username, message } = data;
      if (username && message) {
          console.log(`${username} says: ${message}`);
          io.emit('chat', { username, message });
      }
  });

  // Handle user disconnect
  socket.on('disconnect', () => {
      if (socket.username) {
          console.log(`${socket.username} disconnected.`);
          io.emit('user_disconnected', `${socket.username} has left the chat.`);
      }
  });
});

  
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
